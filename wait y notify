/*

What is the difference between wait and sleep?

Let's discuss the difference between sleep and wait. They may seem to be very similar but there are fundamental differences between them.

    you call wait on the Object while on the other hand you call sleep on the Thread itself

    wait can be interrupter (this is why we need the InterruptedException) while on the other hand sleep can not

    wait (and notify) must happen in a synchronized  block on the monitor object whereas sleep does not

    sleep operation does not release the locks it holds while on the other hand wait releases the lock on the object that wait() is called on

So as you can see there are some differences between wait and sleep operations!


*/

class Process{

    public void produce() throws InterruptedException{
        synchronized (this){
            System.out.println("Running the produce method...");
            wait();
            System.out.println("Again in the procducer method...");
        }
    }

    public void consume() throws InterruptedException{
        Thread.sleep(1000);

        synchronized (this){
            System.out.println("Consume method is executed...");
            notify();

        }
    }
}

public class App{
    public static void main(String[] args) {

        Process process = new Process();
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    process.produce();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });


        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    process.consume();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        t1.start();
        t2.start();
    }
}
